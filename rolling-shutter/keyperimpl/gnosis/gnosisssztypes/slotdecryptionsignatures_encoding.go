// Code generated by fastssz. DO NOT EDIT.
// Hash: f106749778e6a2208c4b5f0385bccdaa3d89bf4a4c5d96c0e60aa690e7c750be
// Version: 0.1.3
package gnosisssztypes

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the IdentityPreimage object
func (i *IdentityPreimage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the IdentityPreimage object to a target array
func (i *IdentityPreimage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Bytes'
	if size := len(i.Bytes); size != 52 {
		err = ssz.ErrBytesLengthFn("IdentityPreimage.Bytes", size, 52)
		return
	}
	dst = append(dst, i.Bytes...)

	return
}

// UnmarshalSSZ ssz unmarshals the IdentityPreimage object
func (i *IdentityPreimage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 52 {
		return ssz.ErrSize
	}

	// Field (0) 'Bytes'
	if cap(i.Bytes) == 0 {
		i.Bytes = make([]byte, 0, len(buf[0:52]))
	}
	i.Bytes = append(i.Bytes, buf[0:52]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the IdentityPreimage object
func (i *IdentityPreimage) SizeSSZ() (size int) {
	size = 52
	return
}

// HashTreeRoot ssz hashes the IdentityPreimage object
func (i *IdentityPreimage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the IdentityPreimage object with a hasher
func (i *IdentityPreimage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Bytes'
	if size := len(i.Bytes); size != 52 {
		err = ssz.ErrBytesLengthFn("IdentityPreimage.Bytes", size, 52)
		return
	}
	hh.PutBytes(i.Bytes)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the IdentityPreimage object
func (i *IdentityPreimage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}

// MarshalSSZ ssz marshals the SlotDecryptionSignatureData object
func (s *SlotDecryptionSignatureData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SlotDecryptionSignatureData object to a target array
func (s *SlotDecryptionSignatureData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'InstanceID'
	dst = ssz.MarshalUint64(dst, s.InstanceID)

	// Field (1) 'Eon'
	dst = ssz.MarshalUint64(dst, s.Eon)

	// Field (2) 'Slot'
	dst = ssz.MarshalUint64(dst, s.Slot)

	// Field (3) 'TxPointer'
	dst = ssz.MarshalUint64(dst, s.TxPointer)

	// Offset (4) 'IdentityPreimages'
	dst = ssz.WriteOffset(dst, offset)

	// Field (4) 'IdentityPreimages'
	if size := len(s.IdentityPreimages); size > 1024 {
		err = ssz.ErrListTooBigFn("SlotDecryptionSignatureData.IdentityPreimages", size, 1024)
		return
	}
	for ii := 0; ii < len(s.IdentityPreimages); ii++ {
		if dst, err = s.IdentityPreimages[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SlotDecryptionSignatureData object
func (s *SlotDecryptionSignatureData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o4 uint64

	// Field (0) 'InstanceID'
	s.InstanceID = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Eon'
	s.Eon = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'Slot'
	s.Slot = ssz.UnmarshallUint64(buf[16:24])

	// Field (3) 'TxPointer'
	s.TxPointer = ssz.UnmarshallUint64(buf[24:32])

	// Offset (4) 'IdentityPreimages'
	if o4 = ssz.ReadOffset(buf[32:36]); o4 > size {
		return ssz.ErrOffset
	}

	if o4 < 36 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (4) 'IdentityPreimages'
	{
		buf = tail[o4:]
		num, err := ssz.DivideInt2(len(buf), 52, 1024)
		if err != nil {
			return err
		}
		s.IdentityPreimages = make([]IdentityPreimage, num)
		for ii := 0; ii < num; ii++ {
			if err = s.IdentityPreimages[ii].UnmarshalSSZ(buf[ii*52 : (ii+1)*52]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SlotDecryptionSignatureData object
func (s *SlotDecryptionSignatureData) SizeSSZ() (size int) {
	size = 36

	// Field (4) 'IdentityPreimages'
	size += len(s.IdentityPreimages) * 52

	return
}

// HashTreeRoot ssz hashes the SlotDecryptionSignatureData object
func (s *SlotDecryptionSignatureData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SlotDecryptionSignatureData object with a hasher
func (s *SlotDecryptionSignatureData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'InstanceID'
	hh.PutUint64(s.InstanceID)

	// Field (1) 'Eon'
	hh.PutUint64(s.Eon)

	// Field (2) 'Slot'
	hh.PutUint64(s.Slot)

	// Field (3) 'TxPointer'
	hh.PutUint64(s.TxPointer)

	// Field (4) 'IdentityPreimages'
	{
		subIndx := hh.Index()
		num := uint64(len(s.IdentityPreimages))
		if num > 1024 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.IdentityPreimages {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1024)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SlotDecryptionSignatureData object
func (s *SlotDecryptionSignatureData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
